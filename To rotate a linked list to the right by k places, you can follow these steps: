class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def rotateRight(head, k):
    if not head or k == 0:
        return head

    # Calculate the length of the linked list
    length = 1
    current = head
    while current.next:
        current = current.next
        length += 1

    # Calculate the effective rotation amount (k % length)
    k = k % length

    if k == 0:
        return head  # No rotation needed

    # Find the new head and new tail
    current = head
    for _ in range(length - k - 1):
        current = current.next

    new_head = current.next
    current.next = None
    current = new_head
    while current.next:
        current = current.next

    # Update the last node's next to point to the original head
    current.next = head

    return new_head

# Helper function to create a linked list from a list of values
def createLinkedList(values):
    if not values:
        return None
    head = ListNode(values[0])
    current = head
    for val in values[1:]:
        current.next = ListNode(val)
        current = current.next
    return head

# Helper function to print a linked list
def printLinkedList(head):
    current = head
    while current:
        print(current.val, end=" -> ")
        current = current.next
    print("None")

# Example usage:
values = [1, 2, 3, 4, 5]
k = 2
head = createLinkedList(values)
rotated_head = rotateRight(head, k)
printLinkedList(rotated_head)
